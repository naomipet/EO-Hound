<!DOCTYPE html>
<!--
An example web page that creates and displays a custom Google Maps API Map Type
for Earth Engine map tiles.  See Google Maps documentation on Custom Map Types
for details.
-->
<html>
  <head>
    <title>EO-Hound</title>

     <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

    <!-- mine css -->
    <link rel="stylesheet" type="text/css" href="/static/main.css">
    <link rel="stylesheet" type="text/css" href="/static/statistic.css">

    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

  </head>
  <body>
  
    <header class="site-header">
    <nav id="mainNavbar" class="navbar navbar-expand-xl navbar-dark bg-steel">
        <a class="navbar-brand" href="#">EO Hound</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
    
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">HOME</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link " href="/about">DOCUMENTATION</a>
                </li>
            </ul>
        </div>
    </nav>
    </header>

  <!-- form -->

  <div id="formClose">
    <span id="openTab">
      <i class="fas fa-sliders-h"></i>
    </span>
  </div>

    <div id="form" class="container">
      <div class="row">
        <div class="col-lg">
          <span id="closeTab">
            <i class="far fa-times-circle"></i>
          </span>
          <h3 id="formTitle">Insert Search Criteria</h3>
          <hr class="style14">
        <div>
        <form action="/filter" method="GET" enctype="multipart/form-data" id="myForm">
            <label for="collection">Select your collection: </label>
            <div class="form-group">
                <select class="form-control" name="imageCollection">
                  <option value="Landsat">Landsat</option>
                  <option value="Sentinel1C">Sentinel 1C</option>
                  <option value="Sentinel2A">Sentinel 2A</option>
                </select>
            </div>
            <label for="dateStart dateEnd ">Sensing period: </label>
            <div class="form-group">
                <input class="form-control inputDisp" type="date" name="dateStart" placeholder="Start date" required>
                <input class="form-control inputDisp float-right" type="date" name="dateEnd" placeholder="End date" required>
            </div>
            <label for="jsonBbox">Input Bounding Box: </label>
            <div class="form-group">
                <input class="form-control" type="file" name="jsonBbox" id="bbox" placeholder="GeoJson" accept=".geojson">
            </div>
           <div class="form-check checkboxPosition">
              <input type="checkbox" class="form-check-input" id="loadImage">
              <label class="form-check-label marginSet" for="loadImage">Load Image Collection</label>
            </div>
            <div class="form-group">
              <input class="form-control" type="text" name="coordinates" id="geometry">
            </div>
            <label for="cloudFilter">Cloud Filter: </label>
            <div class="form-group">
                <input class="form-control" type="number" name="cloudFilter" placeholder="Cloud filter" min="0" max="100" required>
            </div>
            <div class="form-group">
                <button id="buttonColor" class="btn btn-lg btn-primary btn-block"><i class="fas fa-spinner"></i>Run</button>
            </div>
        </form>
        </div>
      </div>
    </div>
  </div>

    <!-- General statistic container -->

  <div id="containerStatGen" class="container">
    <div class="row">
      <div class="col-12">
         <div class="dropdown dropdownPosition">
            <button id="buttonColor" class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Choose Granule
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
              <a class="dropdown-item" href="#">Granule1</a>
              <a class="dropdown-item" href="#">Granules2</a>
              <a class="dropdown-item" href="#">Granules2</a>
            </div>
          </div>  
        <h3 id="formTitleStat">General Statistics</h3>
      </div>
    </div>
    <div class="row">
      <div class="col-6">
        {{!-- number of images --}}
        <div id="images" class="squareSmall">
          <div class="row">
            <div class="col-4">
              <i class="fas fa-camera-retro iconSmall"></i>
            </div>
            <div class="col-8">
               <div class="resultSquareSmall">
               <p>510</p>
              </div>
            </div>
          </div>
          <div class="row">
          <div class="col-12">
            <h4 class="titleSquareSmall">Number of Images</h4>
          </div>
        </div>
        </div>
        
        {{!-- clouds --}}
        <div id="cloud" class="squareSmall">
          <div class="row">
            <div class="col-4">
              <i class="fas fa-cloud iconSmall"></i>
            </div>
            <div class="col-8">
              <div class="resultSquareSmall">
                <p>50%</p>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-12">
              <h4 class="titleSquareSmall">Average Cloud Cover</h4>
            </div>
          </div>
        </div>
        
      </div>
      <div class="col-6">
         {{!-- Area of Interest --}}
        <div id="areaOfInt" class="squareSmall">
          <div class="row">
            <div class="col-4">
              <i class="fas fa-draw-polygon iconSmall"></i>
            </div>
            <div class="col-8">
              <div class="resultSquareSmall">
               <p>100,50 kmq</p>
               </div>
            </div>
          </div>
          <div class="row">
          <div class="col-12">
            <h4 class="titleSquareSmall">Buonding Box Area</h4>
          </div>
        </div>
        </div>
        {{!-- Revisiting Time --}}
        <div id="revTime" class="squareSmall">
          <div class="row">
            <div class="col-4">
               <i class="fas fa-satellite iconSmall"></i>
            </div>
            <div class="col-8">
              <div class="resultSquareSmall">
                <p>5 Day</p>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-12">
              <h4 class="titleSquareSmall">Revisiting Time</h4>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-12">
         <h3 id="formTitleStat">Graphs</h3>
          {{!--  General stat graph --}}
          <div id="chartBoxSmall">  
            <canvas id="myChart"></canvas>
          </div>
         
      </div>
    </div>
  </div>
   


  <!-- The element into which we render the Google Map. -->
  <div id="map"></div>

  <!-- Optional JavaScript -->
  <!-- jQuery first, then Popper.js, then Bootstrap JS -->
  <script src="http://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>



  <!-- Load our JavaScript file. -->
  <script src="/static/script.js"></script>

  <!-- Create a callback to boot our application. -->
  <script>


    // This function will run after the Google Maps API has finished leading,
    // as specified by the &callback=initMap parameter in the Maps API script
    // URL (below).
    // $('#myForm').on('submit', function() { // Fired listener when submit button is clicked.
    //   $.ajax({
    //     url: '/filter',
    //     dataType : 'json', // Try text also, maybe the api donn't send result in json. Text always work.
    //     data: $('#myForm').serialize(), // The form to send.
    //     success : function (response) {// Get response on successful sever connection.
    //       var data = response['dataStart']; // or alert
    //     }, error: function (err) { // Get error on failed connection to server.
    //       console.log(err); // or alert
    //     }
    //   })
    // });
    document.forms['myForm'].addEventListener('submit', (event) => {
    event.preventDefault();
    $.ajax({
        url: '/filter',
        dataType : 'json', // Try text also, maybe the api donn't send result in json. Text always work.
        data: $('#myForm').serialize(), // The form to send.
        success : function (response) {// Get response on successful sever connection.
          var granules = response['granules']
          var images = response['images']
          var areas = granules.features.map(function(d) { return d.properties.areaHa})
          var names = JSON.stringify(response['names']).replace(/"/g, '').replace(/\[|\]/g, '')
          names = names.split(',')
          var clouds = JSON.stringify(response['clouds'])
          var minDate = JSON.stringify(response['minDate'])
          var maxDate = JSON.stringify(response['maxDate'])
          ids = JSON.stringify(response['mapid'])
          tokens = JSON.stringify(response['token'])
          addLayers(ids, tokens)
          loadGeoJson(granules)
          var params = $('#myForm').serialize()
          window.open("/granule?name=" + names[0] + "&" + params);
        }, error: function (err) { // Get error on failed connection to server.
          console.log(err); // or alert
        }
      })

  });
  document.getElementById('bbox').onchange = function(e) {
    readFile(e.srcElement.files[0]);
  };

  function readFile(file) {
    var reader = new FileReader();
    reader.onload = readSuccess;
    function readSuccess(evt) {
      var geojson = loadGeoJsonString(evt.target.result);
      var geometry = geojson.features[0].geometry.coordinates.toString()
      document.getElementById("geometry").value = geometry;
    };
    reader.readAsText(file);
  }

  //DOM container form and staistic
  var divClose = document.getElementById("form");
  var divOpen = document.getElementById("formClose");
  var icnLoad = document.getElementsByClassName("fa-spinner");
  //var divStatistic = document.getElementById("statistic");

    $("#closeTab").click(function(){
      $(divClose).fadeToggle();
      $(divOpen).fadeToggle();
    })

    $("#openTab").click(function(){
      $(divOpen).fadeToggle();
      $(divClose).fadeToggle();
    })

    $("#buttonColor").click(function(){
      $(icnLoad).fadeIn();
    })


    var ctx = document.getElementById('myChart').getContext('2d');
    var chart = new Chart(ctx, {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {
        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
        datasets: [{
            label: 'My First dataset',
            backgroundColor: 'rgba(47,91,183,0.3)',
            borderColor: 'rgb(47, 91, 183)',
            data: [0, 10, 5, 2, 20, 30, 45]
        }]
    },

    // Configuration options go here
    options: {
        maintainAspectRatio: false
    }
});

  var initMap = function() {
    // The values of mapid and token for the map tiles, generated by Earth
    // Engine using the Node.js script server.js, are injected here using
    // the Handlebars templating engine.
    initialize();
  };

  </script>

  <!-- Load the Google Maps API, and run the initMap() callback when finished. -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAE_3AO7GubgGCKKFU-1JhgiDJV_OEXEmQ&callback=initMap"
          async defer></script>
  </body>
</html>
